//
// Generated by eBay Common SDK Platform, DO NOT CHANGE!
//

#import <Foundation/Foundation.h>
#import "EbayNs_ClassSchema.h"
#import "EbayNs_PropertySchema.h"
#import "EbayNs_BindingConstant.h"
#import "EbayNs_Bindable.h"


@class Trading_RefundArrayType;
@class Trading_ListingCheckoutRedirectPreferenceType;
@class Trading_FeedbackInfoType;
@class Trading_ExternalTransactionType;
@class Trading_VariationType;
@class Trading_SellingManagerProductDetailsType;
@class Trading_ShippingServiceOptionsType;
@class Trading_AmountType;
@class Trading_ItemType;
@class Trading_ShippingDetailsType;
@class Trading_UserType;
@class Trading_OrderType;
@class Trading_TaxesType;
@class Trading_TransactionStatusType;

/**
 
 Contains information about a single transaction. A transaction contains
 information about the sale one or multiple items from a listing to a single
 buyer. The eBay system creates a transaction when a buyer has made a purchase
 (fixed-price listings) or is the winning bidder (BIN and competitive-bid item
 listings). A listing can spawn one or more transactions in these cases:
 multi-item fixed-price listings and Dutch listings. Single-item fixed-price
 listings and Chinese listings can spawn only a single transaction.
 <br><br>
 <span class="tablenote"><strong>Note:</strong>
 As of version 619, Dutch-style (multi-item) competitive-bid auctions are deprecated.
 eBay throws an error if you submit a Dutch item listing with AddItem
 or VerifyAddItem. If you use RelistItem to update a Dutch auction listing,
 eBay generates a warning and resets the Quantity value to 1.
 </span>
 <br>
 
 
 @ingroup Trading
*/
@interface Trading_TransactionType : NSObject <EbayNs_Bindable> {

@private
    Trading_AmountType *amountPaid;
    Trading_AmountType *adjustmentAmount;
    Trading_AmountType *convertedAdjustmentAmount;
    Trading_UserType *buyer;
    Trading_ShippingDetailsType *shippingDetails;
    Trading_AmountType *convertedAmountPaid;
    Trading_AmountType *convertedTransactionPrice;
    NSDate *createdDate;
    NSString *depositType;
    Trading_ItemType *item;
    NSNumber *quantityPurchased;
    Trading_TransactionStatusType *status;
    NSString *transactionID;
    Trading_AmountType *transactionPrice;
    NSNumber *bestOfferSale;
    NSNumber *vatPercent;
    NSMutableArray *externalTransaction;
    Trading_SellingManagerProductDetailsType *sellingManagerProductDetails;
    Trading_ShippingServiceOptionsType *shippingServiceSelected;
    NSString *buyerMessage;
    Trading_AmountType *dutchAuctionBid;
    NSString *buyerPaidStatus;
    NSString *sellerPaidStatus;
    NSDate *paidTime;
    NSDate *shippedTime;
    Trading_AmountType *totalPrice;
    Trading_FeedbackInfoType *feedbackLeft;
    Trading_FeedbackInfoType *feedbackReceived;
    Trading_OrderType *containingOrder;
    Trading_AmountType *finalValueFee;
    Trading_ListingCheckoutRedirectPreferenceType *listingCheckoutRedirectPreference;
    Trading_RefundArrayType *refundArray;
    NSString *transactionSiteID;
    NSString *platform;
    NSString *cartID;
    NSNumber *sellerContactBuyerByEmail;
    NSString *payPalEmailAddress;
    NSString *paisaPayID;
    Trading_AmountType *buyerGuaranteePrice;
    Trading_VariationType *variation;
    NSString *buyerCheckoutMessage;
    Trading_TaxesType *taxes;

}


/**
 
 The amount the buyer paid for the item(s) in the transaction. This
 includes all costs such as shipping and tax. If the seller
 allowed the buyer to change the item total, the buyer is able to change the
 total until the time that the transaction's status moves to Complete.
 Determine whether the buyer changed the amount by retrieving the transaction
 data and comparing the AmountPaid value to what the seller expected. For
 combined payment (the transaction is part of an order),
 GetSellerTransactions and GetItemTransactions return the amount paid for the
 order to which the transaction belongs. For Motors items, AmountPaid is the
 amount paid by the buyer for the deposit.<br />
 <br />
 Not applicable to Half.com.
 
 
 type : class Trading_AmountType
*/
@property (nonatomic, retain) Trading_AmountType *amountPaid;

/**
 
 Adjustment amount entered by the buyer. A positive amount indicates the
 amount is an extra charge being paid to the seller by the buyer. A negative
 value indicates this amount is a credit given to the buyer by the seller.
 <br><br>
 Not applicable to Half.com.
 
 
 type : class Trading_AmountType
*/
@property (nonatomic, retain) Trading_AmountType *adjustmentAmount;

/**
 
 Converted value of AdjustmentAmount in the currency of the site that
 returned the response. Refresh this value every 24 hours to pick up the
 current conversion rates.<br />
 <br />
 Not applicable to Half.com.
 
 
 type : class Trading_AmountType
*/
@property (nonatomic, retain) Trading_AmountType *convertedAdjustmentAmount;

/**
 
 Contains the data for the transaction's buyer. See UserType for its child
 elements. Returned by GetItemsAwaitingFeedback if Seller is making the
 request.<br>
 <br>
 Applicable to Half.com (for GetOrders only).
 
 
 type : class Trading_UserType
*/
@property (nonatomic, retain) Trading_UserType *buyer;

/**
 
 The shipping-related details for an item or transaction, including flat and
 calculated shipping costs and shipping insurance costs. For GetOrders,
 minimal ShippingDetails information is returned under the Transaction
 container.
 <br><br>
 Applicable to Half.com (for GetOrders only).
 
 
 type : class Trading_ShippingDetailsType
*/
@property (nonatomic, retain) Trading_ShippingDetailsType *shippingDetails;

/**
 
 Converted value of AmountPaid in the currency of the site that returned the
 response. Refresh this value every 24 hours to pick up the current
 conversion rates.
 <br><br>
 Not applicable to Half.com.
 
 
 type : class Trading_AmountType
*/
@property (nonatomic, retain) Trading_AmountType *convertedAmountPaid;

/**
 
 Converted value of TransactionPrice in the currency of the site that returned the
 response. Refresh this value every 24 hours to pick up the current conversion rates.
 <br><br>
 Not applicable to Half.com.
 
 
 type : class Trading_AmountType
*/
@property (nonatomic, retain) Trading_AmountType *convertedTransactionPrice;

/**
 
 Indicates when the transaction was created. For fixed-price, Stores, and BIN items
 this indicates when the purchase (or BIN) occurred. For competitive-bid item listing
 types this indicates when listing ended, the winning bidder(s) determined, and the
 transaction created.
 <br><br>
 Applicable to Half.com (for GetOrders only).
 
 
 type : NSDate, wrapper for primitive date
*/
@property (nonatomic, retain) NSDate *createdDate;

/**
 
 Whether the seller requires a deposit for the vehicle.
 Only applicable to US eBay Motors listings. If item is not a Motors
 item, then this returns an empty value.
 <br><br>
 Not applicable to Half.com.
 
 
 type: string constant in Trading_DepositTypeCodeType.h
*/
@property (nonatomic, retain) NSString *depositType;

/**
 
 Information about the item that spawned the transaction. It is a purchase from
 this item's listing that the transaction represents. To remove a property
 from an item, specify it in ModifyType as a changed property, but do not give
 it a value in Item.
 <br><br>
 Applicable to Half.com (for GetOrders).
 
 
 type : class Trading_ItemType
*/
@property (nonatomic, retain) Trading_ItemType *item;

/**
 
 Indicates the number of items the buyer purchased from the listing identified
 in ItemID.
 <br><br>
 Applicable to Half.com (for GetOrders).
 
 
 type : NSNumber, wrapper for primitive int
*/
@property (nonatomic, retain) NSNumber *quantityPurchased;

/**
 
 Contains the status of the transaction, such as the buyer's online payment and
 whether the checkout process for the transaction has been completed. See
 TransactionStatusType for its child elements.
 <br><br>
 Not applicable to Half.com.
 
 
 type : class Trading_TransactionStatusType
*/
@property (nonatomic, retain) Trading_TransactionStatusType *status;

/**
 
 Identifier for the transaction. A value of zero is used for the Chinese auction
 format. Thus, a value of zero is a valid transaction ID. A transaction ID is only
 unique to the listing that spawned it, so a transaction is only uniquely identified
 on a global basis by a combination of ItemID and TransactionID.
 <br><br>
 Applicable to Half.com (for GetOrders only).
 
 
 type : NSString, wrapper for primitive string
*/
@property (nonatomic, retain) NSString *transactionID;

/**
 
 For GetItemTransactions and GetSellerTransactions, this is the
 per-item price (not including shipping, sales tax, etc.) and does not
 consider how many of that item was purchased (QuantityPurchased).
 (Transactions with TransactionArray.Transaction.QuantityPurchased of
 more than 1 have
 the same value for TransactionPrice as transactions with
 TransactionArray.Transaction.QuantityPurchased of 1.) For eBay Motors,
 TransactionPrice is the deposit amount.
 For Best Offers, this is the seller-accepted per-item price.
 <br><br>
 Applicable to Half.com (for GetOrders).
 
 
 type : class Trading_AmountType
*/
@property (nonatomic, retain) Trading_AmountType *transactionPrice;

/**
 
 Whether the transaction was completed with the seller selecting
 a best offer.
 <br><br>
 Not applicable to Half.com.
 
 
 type : NSNumber, wrapper for primitive bool
*/
@property (nonatomic, retain) NSNumber *bestOfferSale;

/**
 
 VAT rate for the item. When the VATPercent is specified, the item's VAT
 information appears on the item's listing page. In addition, the seller
 can choose to print an invoice that includes the item's net price, VAT
 percent, VAT amount, and total price. Since VAT rates vary depending on the
 item and on the user's country of residence, a seller is responsible for
 entering the correct VAT rate; it is not calculated by eBay. To specify a
 VATPercent, a seller must have a VAT-ID registered with eBay and must be
 listing the item on a VAT-enabled site. Max precision 3 decimal places. Max
 length 5 characters. Note: The View Item page displays the precision to 2
 decimal places with no trailing zeros. However, the full value you send in is
 stored.
 <br><br>
 Not applicable to Half.com.
 
 
 type : NSNumber, wrapper for primitive double
*/
@property (nonatomic, retain) NSNumber *vatPercent;

/**
 
 A PayPal transaction that relates to this eBay transaction. Returned only if there is
 at least one PayPal transaction related to this eBay transaction.
 <br><br>
 Not applicable to Half.com.
 
 
 entry type : class Trading_ExternalTransactionType
*/
@property (nonatomic, retain) NSMutableArray *externalTransaction;

/**
 
 Not applicable to Half.com.
 
 
 type : class Trading_SellingManagerProductDetailsType
*/
@property (nonatomic, retain) Trading_SellingManagerProductDetailsType *sellingManagerProductDetails;

/**
 
 The shipping service selected by the buyer from the services
 offered by the seller.
 <br><br>
 Not applicable to Half.com.
 
 
 type : class Trading_ShippingServiceOptionsType
*/
@property (nonatomic, retain) Trading_ShippingServiceOptionsType *shippingServiceSelected;

/**
 
 Display message from buyer. This field holds transient
 data that is only being returned in the notification flow.
 This field is only returned in the Checkout related notifications.
 <br><br>
 Not applicable to Half.com.
 
 
 type : NSString, wrapper for primitive string
*/
@property (nonatomic, retain) NSString *buyerMessage;

/**
 
 This field holds the Dutch Auction Offer Bid by the buyer in this transaction,
 if this is a Dutch (multi-item) auction. This field will only be returned if
 caller has set IncludeDutchAuctionBid to true.
 <br><br>
 Not applicable to Half.com.
 <br><br>
 <span class="tablenote"><strong>Note:</strong>
 As of version 619, Dutch-style (multi-item) competitive-bid auctions are deprecated.
 eBay throws an error if you submit a Dutch item listing with AddItem
 or VerifyAddItem. If you use RelistItem to update a Dutch auction listing,
 eBay generates a warning and resets the Quantity value to 1.
 </span>
 <br>
 
 
 type : class Trading_AmountType
*/
@property (nonatomic, retain) Trading_AmountType *dutchAuctionBid;

/**
 
 Specifies the transaction's paid status, as seen by the buyer. Returned in lists of
 won items.
 <br><br>
 Not applicable to Half.com.
 
 
 type: string constant in Trading_PaidStatusCodeType.h
*/
@property (nonatomic, retain) NSString *buyerPaidStatus;

/**
 
 Specifies the transaction's payment status, as seen by the seller. Returned in lists
 of sold items.
 <br><br>
 Not applicable to Half.com.
 
 
 type: string constant in Trading_PaidStatusCodeType.h
*/
@property (nonatomic, retain) NSString *sellerPaidStatus;

/**
 
 Indicates the time when the transaction was marked paid.
 There are many ways to mark a transaction as paid.
 eBay sets it when payment is made via PayPal.
 A seller can mark an item as paid in My eBay or Selling Manager Pro.
 An application can use ReviseCheckoutStatus or CompleteSale on behalf
 of the seller.
 Note: This value is only visible to the user if the request user is
 the buyer or seller associated with the transaction.
 <br><br>
 Not applicable to Half.com.
 
 
 type : NSDate, wrapper for primitive date
*/
@property (nonatomic, retain) NSDate *paidTime;

/**
 
 Indicates the time when the item(s) associated with the transaction were
 marked as shipped, if known. The value is set when the seller uses shipment
 tracking features offered by eBay or an eBay partner. This value is also set
 when the seller marks the item as shipped by using CompleteSale. If the seller
 is a Selling Manager Pro user, they can also mark the item as shipped by using
 My eBay. Note that this value is only visible if the request user is the buyer
 or seller associated with the transaction.
 <br><br>
 Applicable to Half.com (for GetOrders only).
 
 
 type : NSDate, wrapper for primitive date
*/
@property (nonatomic, retain) NSDate *shippedTime;

/**
 
 Not applicable to Half.com.
 
 
 type : class Trading_AmountType
*/
@property (nonatomic, retain) Trading_AmountType *totalPrice;

/**
 
 A container for feedback information left FOR the user's
 transaction partner. Only returned if feedback was left for
 a transaction.
 <br><br>
 Not applicable to Half.com.
 
 
 type : class Trading_FeedbackInfoType
*/
@property (nonatomic, retain) Trading_FeedbackInfoType *feedbackLeft;

/**
 
 A container for feedback information left BY the user's
 transaction partner. Only returned if feedback was left for
 a transaction.
 <br><br>
 Not applicable to Half.com.
 
 
 type : class Trading_FeedbackInfoType
*/
@property (nonatomic, retain) Trading_FeedbackInfoType *feedbackReceived;

/**
 
 The order to which the transaction belongs. This is only returned if
 IncludeContainingOrder is true and and if this transaction is part of an
 active or completed order.
 <br><br>
 Not applicable to Half.com.
 
 
 type : class Trading_OrderType
*/
@property (nonatomic, retain) Trading_OrderType *containingOrder;

/**
 
 You are charged a Final Value Fee (FVF) if your item is sold, ends with a
 winning bid, or is purchased. This fee applies whether or not you actually
 complete the sale with the buyer. The Final Value Fee is returned in
 Transaction.FinalValueFee. See the eBay.com Web site online help for more
 information about the Final Value Fee.
 <br><br>
 The Final Value Fee for fixed price format (FixedPriceItem) and Store Inventory
 (StoresFixedPrice) items is returned by GetSellerTransactions,
 GetItemTransactions, and GetOrderTransactions on a transaction-by-transaction
 basis, regardless of the listing status. For all other listing types,
 (excluding Buy It Now purchases), the Final Value Fee is returned when the
 listing status is Completed.
 <br><br>
 If you request a Final Value Fee Credit, the value of Transaction.FinalValueFee
 will not change for the item if a credit is issued. (The credit only appears in
 the seller's account data.)
 <br><br>
 <span class="tablenote"><strong>Note:</strong>
 As of version 619, Dutch-style (multi-item) competitive-bid auctions are
 deprecated. eBay throws an error if you submit a Dutch item listing with AddItem
 or VerifyAddItem. If you use RelistItem to update a Dutch auction listing, eBay
 generates a warning and resets the Quantity value to 1.
 </span>
 <br><br>
 Not applicable to Half.com.
 
 
 type : class Trading_AmountType
*/
@property (nonatomic, retain) Trading_AmountType *finalValueFee;

/**
 
 ProStores listing level preferences regarding the store to which
 checkout should be redirected for the listing if ThirdPartyCheckout
 is true.
 
 
 type : class Trading_ListingCheckoutRedirectPreferenceType
*/
@property (nonatomic, retain) Trading_ListingCheckoutRedirectPreferenceType *listingCheckoutRedirectPreference;

/**
 
 Contains an array of refunds.
 Applicable to Half.com (for GetOrders).
 
 
 type : class Trading_RefundArrayType
*/
@property (nonatomic, retain) Trading_RefundArrayType *refundArray;

/**
 
 The site upon which the item transaction was made.
 
 
 type: string constant in Trading_SiteCodeType.h
*/
@property (nonatomic, retain) NSString *transactionSiteID;

/**
 
 Name of the eBay co-branded site upon which the transaction was made.
 
 
 type: string constant in Trading_TransactionPlatformCodeType.h
*/
@property (nonatomic, retain) NSString *platform;

/**
 
 Shopping cart identifier. Only returned for transactions made
 on Shopping.com using the Shopping.com shopping cart.
 
 
 type : NSString, wrapper for primitive string
*/
@property (nonatomic, retain) NSString *cartID;

/**
 
 Indicates whether the buyer has opted to accept emails from all the
 seller(s) in the Shopping.com shopping cart. Only returned for transactions
 made on Shopping.com using the Shopping.com shopping cart.
 
 
 type : NSNumber, wrapper for primitive bool
*/
@property (nonatomic, retain) NSNumber *sellerContactBuyerByEmail;

/**
 
 The seller's Paypal email address.
 
 
 type : NSString, wrapper for primitive string
*/
@property (nonatomic, retain) NSString *payPalEmailAddress;

/**
 
 Specifies the PaisaPayID using which the Item was paid for. Applicable for India
 site(203) only.
 
 
 type : NSString, wrapper for primitive string
*/
@property (nonatomic, retain) NSString *paisaPayID;

/**
 
 For the Australia site, BuyerGuaranteePrice is the PayPal Buyer Protection coverage,
 offered for the item at the time of purchase. Details of coverage are in the
 following sections of the View Item page: the Buy Safely section and the Payment
 Details section.
 
 
 type : class Trading_AmountType
*/
@property (nonatomic, retain) Trading_AmountType *buyerGuaranteePrice;

/**
 
  Variations are multiple similar (but not identical) items in
  a single fixed-price (or Store Inventory Format) listing.
  For example, a
  single listing could contain multiple items of the same brand and
  model that vary by color and size (like "Blue, Large" and "Black,
  Medium"). Each variation can have its own quantity and
  price.<br>
  <br>
  When a user purchases items from a multi-variation listing,
  this Variation node contains information about which variation
  was purchased. Therefore, applications that process transactions
  should always check to see if this node is present.
  A single transaction can contain items from only one variation.
 
 
 type : class Trading_VariationType
*/
@property (nonatomic, retain) Trading_VariationType *variation;

/**
 
 The Comment left by buyer during checkout.
 
 
 type : NSString, wrapper for primitive string
*/
@property (nonatomic, retain) NSString *buyerCheckoutMessage;

/**
 
 Reserved for future use.
 Taxes. Returned only there are taxes.
 
 
 type : class Trading_TaxesType
*/
@property (nonatomic, retain) Trading_TaxesType *taxes;



@end
