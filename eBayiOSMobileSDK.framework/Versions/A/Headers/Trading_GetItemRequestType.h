//
// Generated by eBay Common SDK Platform, DO NOT CHANGE!
//

#import <Foundation/Foundation.h>
#import "EbayNs_ClassSchema.h"
#import "EbayNs_PropertySchema.h"
#import "EbayNs_BindingConstant.h"
#import "EbayNs_Bindable.h"
#import "Trading_AbstractRequestType.h"


@class Trading_NameValueListArrayType;

/**
 
 Returns item data (title, description, price information, seller information, and so on)
 for the specified item ID.
 
 
 @ingroup Trading
*/
@interface Trading_GetItemRequestType : Trading_AbstractRequestType {

@private
    NSString *itemID;
    NSNumber *includeWatchCount;
    NSNumber *includeCrossPromotion;
    NSNumber *includeItemSpecifics;
    NSNumber *includeTaxTable;
    NSString *sku;
    NSString *variationSKU;
    Trading_NameValueListArrayType *variationSpecifics;
    NSString *transactionID;
    NSNumber *includeItemCompatibilityList;

}


/**
 
 Specifies the item ID that uniquely identifies the item listing for which
 to retrieve the data.
 <br><br>
 ItemID is a required input in most cases. SKU can be used instead in certain
 cases (see the description of SKU). If both ItemID and SKU are specified for
 items where the inventory tracking method is ItemID, ItemID takes precedence.
 
 
 type : NSString, wrapper for primitive string
*/
@property (nonatomic, retain) NSString *itemID;

/**
 
 Indicates if the caller wants to include watch count for that item in the
 response. You must be the seller of the item to retrieve the watch count.
 
 
 type : NSNumber, wrapper for primitive bool
*/
@property (nonatomic, retain) NSNumber *includeWatchCount;

/**
 
 Specifies whether or not to include cross-promotion information for
 the item in the call response.
 <br><br>
 With a request version of 485 or higher, the default is false (do not
 include cross-promotion details). Set to true to retrieve cross-promotion
 information for the item. Cross-promotion information is returned in
 Item.CrossPromotion.PromotedItem.PromotionDetails.
 A promoted item will now contain multiple PromotionDetails containers.
 <br><br>
 With a request version lower than 485, the default is true (include
 cross-promotions). Set the value to false if you do not want to retrieve
 cross-promotion information. Cross-promotion information, PromotedPrice
 and PromotedPriceType, are returned in Item.CrossPromotion.PromotedItem.
 If a promoted item has multiple PromotedPriceType and PromotedPrice value
 pairs, only the last pair is returned.
 
 
 type : NSNumber, wrapper for primitive bool
*/
@property (nonatomic, retain) NSNumber *includeCrossPromotion;

/**
 
 If true, the response returns the ItemSpecifics node
 (if the listing has custom Item Specifics).<br>
 <br>
 Item Specifics are well-known aspects of items in a given
 category. For example, items in a washer and dryer category
 might have an aspect like Type=Top-Loading; whereas
 items in a jewelry category might have an aspect like
 Gemstone=Amber.<br>
 <br>
 (This does not cause the response to include ID-based
 attributes. To also retrieve ID-based attributes,
 pass DetailLevel in the request with the value
 ItemReturnAttributes or ReturnAll.)
 
 
 type : NSNumber, wrapper for primitive bool
*/
@property (nonatomic, retain) NSNumber *includeItemSpecifics;

/**
 
 If true, an associated tax table is returned in the response.
 If no tax table is associated with the item, then no
 tax table is returned, even if IncludeTaxTable is set to true.
 
 
 type : NSNumber, wrapper for primitive bool
*/
@property (nonatomic, retain) NSNumber *includeTaxTable;

/**
 
 Retrieves an item that was listed by the user identified
 in AuthToken and that is being tracked by this SKU.<br>
 <br>
 A SKU (stock keeping unit) is an identifier defined by a seller.
 Some sellers use SKUs to track complex flows of products
 and information on the client side.
 eBay preserves the SKU on the item, enabling you
 to obtain it before and after a transaction is created.
 (SKU is recommended as an alternative to
 ApplicationData.)<br>
 <br>
 In GetItem, SKU can only be used to retrieve one of your
 own items, where you listed the item by using AddFixedPriceItem
 or RelistFixedPriceItem,
 and you set Item.InventoryTrackingMethod to SKU at
 the time the item was listed. (These criteria are necessary to
 uniquely identify the listing by a SKU.)<br>
 <br>
 Either ItemID or SKU is required in the request.
 If both are passed, they must refer to the same item,
 and that item must have InventoryTrackingMethod set to SKU.
 
 
 type : NSString, wrapper for primitive string
*/
@property (nonatomic, retain) NSString *sku;

/**
 
 Variation-level SKU that uniquely identifes a Variation within
 the listing identified by ItemID. Only applicable when the
 seller listed the item with Variation-level SKU (Variation.SKU)
 values. Retrieves all the usual Item fields, but limits the
 Variations content to the specified Variation.
 If not specified, the response includes all Variations.
 
 
 type : NSString, wrapper for primitive string
*/
@property (nonatomic, retain) NSString *variationSKU;

/**
 
 Name-value pairs that identify one or more Variations within the
 listing identified by ItemID. Only applicable when the seller
 listed the item with Variations. Retrieves all the usual Item
 fields, but limits the Variations content to the specified
 Variation(s). If the specified pairs do not match any Variation,
 eBay returns all Variations.<br>
 <br>
 To retrieve only one variation, specify the full set of
 name/value pairs that match all the name-value pairs of one
 Variation. <br>
 <br>
 To retrieve multiple variations (using a wildcard),
 specify one or more name/value pairs that partially match the
 desired variations. For example, if the listing contains
 Variations for shirts in different colors and sizes, specify
 Color as Red (and no other name/value pairs) to retrieve
 all the red shirts in all sizes (but no other colors).
 
 
 type : class Trading_NameValueListArrayType
*/
@property (nonatomic, retain) Trading_NameValueListArrayType *variationSpecifics;

/**
 
 Identifies a single transaction for a listing. A transaction begins when
 a winning bidder or buyer is determined, and ends when the buyer finishes
 the checkout process.
 <br><br>
 Since you can change active multiple-quantity fixed price listings even
 after one of the items has been purchased, the transaction ID is
 associated with a snapshot of the item data at the time of the purchase.
 <br><br>
 After one item in a multi-quantity listing has been sold, sellers can not
 change the values in the Title, Primary Category, Secondary Category,
 Listing Duration, and Listing Type fields. However, all other fields are
 editable.
 <br><br>
 Specifying a TransactionID in the GetItem request allows you to retrieve
 a snapshot of the listing as it was when the transaction was created.
 
 
 type : NSString, wrapper for primitive string
*/
@property (nonatomic, retain) NSString *transactionID;

/**
 
 This field is used to specify whether or not to retrieve Parts
 Compatiblity information. If true, any compatible applications associated
 with the item will be returned in the response (<b class="con">
 Item.ItemCompatibilityList</b>). If no compatible applications have
 been specified for the item, no item compatibilities will be returned.
 <br><br>
 If false or not specified, the response will return a compatibility count
 (<b class="con">ItemCompatibilityCoun</b>t) when parts 
 compatibilities have been specified for the item.
 <br><br> 
 Parts Compatibility is supported in limited Parts & Accessories
 categories for the eBay Motors (US) site (site ID 100) only.
 
 
 type : NSNumber, wrapper for primitive bool
*/
@property (nonatomic, retain) NSNumber *includeItemCompatibilityList;


@end
